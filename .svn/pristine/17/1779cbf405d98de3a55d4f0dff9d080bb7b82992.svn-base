# Copyright 2010, Karljohan Lundin Palmerius
#

"""This file provides scripts for the Candy package.



This file is part of Candy.

Candy is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Candy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Candy; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

"""

from H3D import *
from H3DInterface import *

T, = references.getValue()

velocity = SFVec3f()
rotation = SFRotation()
orientation = SFRotation()

shape_template = """
<Shape>
  <Appearance>
    <Material
        diffuseColor=".6 .8 .2"
        specularColor=".6 .6 .0"/>
    <FrictionalSurface />
  </Appearance>
  <Box size=".04 .04 .04"/>
</Shape>
"""

transform_template = """
<Transform/>
"""

shape = createX3DNodeFromString(shape_template)[0]

children = []

for idx_y in xrange(-20,20):
  for idx_x in xrange(-20,20):
    node = createX3DNodeFromString(transform_template)[0]
    node.translation.setValue(Vec3f( 0.1*idx_x, 0.1*idx_y, 0.0 ))
    node.children.setValue([shape])
    children.append(node)

T.children.setValue(children)


class Typist( TypedField(SFBool,SFString) ):
  def __init__(self):
    SFBool.__init__(self)
    self.R = Rotation()
    self.V = Vec3f()
    
  def update( self, event ):
    routes_in = self.getRoutesIn()
    str = routes_in[0].getValue()
    
    if str == '+':
      self.V += orientation.getValue() * Vec3f(0,0,-.05)
      velocity.setValue(self.V)
      
    elif str == '-':
      self.V -= orientation.getValue() * Vec3f(0,0,-.05)
      velocity.setValue(self.V)
      
    elif str == 'w':
      self.R *= Rotation(1,0,0,-0.1)
      rotation.setValue(self.R)
    elif str == 's':
      self.R *= Rotation(1,0,0,+0.1)
      rotation.setValue(self.R)
      
    elif str == 'a':
      self.R *= Rotation(0,0,1,+0.1)
      rotation.setValue(self.R)
    elif str == 'd':
      self.R *= Rotation(0,0,1,-0.1)
      rotation.setValue(self.R)
    
    return True

typist = Typist()
keyboard = createX3DNodeFromString("<KeySensor />")[0]
keyboard.keyPress.routeNoEvent(typist)
typist.routeNoEvent(eventSink)

