/**
   Copyright 2006-2007, Karljohan Lundin Palmerius
   

This file is part of Candy.

Candy is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Candy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Candy; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#ifndef _CANDY_CUBICPOSITIONINTERPOLATOR_HH_
#define _CANDY_CUBICPOSITIONINTERPOLATOR_HH_

#include <Candy/Candy.hh>

#include <H3D/X3DInterpolatorNode.h>
#include <H3D/TypedField.h>
#include <H3D/SFBool.h>
#include <H3D/SFVec3f.h>
#include <H3D/SFFloat.h>
#include <H3D/MFVec3f.h>

namespace Candy {
  
  /**
     This node provides a position interpolation functionality with
     cubic interpolation, to produce a smooth path. It is useful for
     producing paths for flying objects, for example in transitions
     between using and not using a graphical user interface or
     presenting a splash screen.
     
     \beginX3D
     \exposedField keyValue \n1 MFVec3f \n2 [] \n3
      \eol
     \eventOut value_changed \n1 (SFVec3f) \n2 (0,0,0) \n3
      \eol
     \exposedField closed \n1 SFBool \n2 False \n3
      \eol
     \endX3D
  */
  class CANDY_API CubicPositionInterpolator
    : public H3D::X3DInterpolatorNode {
    
  public:
    
    struct CANDY_API SFValue
      : H3D::TypedField< H3D::SFVec3f,
                         H3D::Types< H3D::SFFloat,
                                     H3D::MFFloat,
                                     H3D::MFVec3f,
                                     H3D::SFBool > > {
      virtual void update();
    };
    
    CubicPositionInterpolator
    ( H3D::Inst< H3D::SFNode  > _metadata      = 0,
      H3D::Inst< H3D::SFFloat > _set_fraction  = 0,
      H3D::Inst< H3D::MFFloat > _key           = 0,
      H3D::Inst< H3D::MFVec3f > _keyValue      = 0,
      H3D::Inst< SFValue      > _value_changed = 0,
      H3D::Inst< H3D::SFBool  > _closed        = 0 );

    std::auto_ptr< H3D::MFVec3f >  keyValue;

    std::auto_ptr< SFValue      >  value_changed;
    
    std::auto_ptr< H3D::SFBool  >  closed;
    
    static H3D::H3DNodeDatabase database;
  };
}

#endif

