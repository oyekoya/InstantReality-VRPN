# Copyright 2005-2006, Karljohan Lundin
#

"""This file provides scripts for the Shell tool of Candy.


This file is part of Candy.

Candy is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Candy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Candy; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

"""

import math, sys, StringIO

import wx
import threading

from H3D import *
from H3DInterface import *

node = references.getValue()[0]
nodes = references.getValue()


class Shell(wx.Frame):
  def __init__( self ):
    wx.Frame.__init__( self, None, -1, "Python Shell",
                       wx.DefaultPosition, wx.Size(400, 250) )

    self.history = []
    self.is_at = 1
    
    self.sizer = wx.FlexGridSizer(2)
    self.SetSizer( self.sizer )

    self.splitter = wx.SplitterWindow( self, -1 )
    self.splitter.SetSashGravity(1.0)
    self.sizer.Add( self.splitter, 1, wx.EXPAND )
    
    self.output = wx.TextCtrl( self.splitter, -1,
                               style = ( wx.TE_MULTILINE |
                                         wx.TE_READONLY |
                                         wx.TE_DONTWRAP |
                                         wx.TE_RICH ),
                               size = wx.Size(400, 100) )
    
    self.input = wx.TextCtrl( self.splitter, -1,
                              style = ( wx.TE_MULTILINE |
                                        wx.TE_DONTWRAP ),
                              size = wx.Size(400, 100) )
    self.input.Bind(wx.EVT_CHAR, self.OnChar)
    
    self.splitter.SplitHorizontally( self.output,
                                     self.input, 0 )
    
    self.run = wx.Button( self, -1, label = "Execute" )
    self.sizer.Add( self.run, 1, wx.EXPAND )
    
    button_id = self.run.GetId()
    wx.EVT_BUTTON( self, button_id, self.execute )
    
    self.sizer.AddGrowableCol(0,1)
    self.sizer.AddGrowableRow(0,1)
    
    self.style_default = wx.TextAttr(wx.Colour(   0,   0,   0 ))
    self.style_in      = wx.TextAttr(wx.Colour( 100, 100, 100 ))
    self.style_err     = wx.TextAttr(wx.Colour( 100,   0,   0 ))
    self.style_out     = wx.TextAttr(wx.Colour(   0, 100,   0 ))

    self.Fit()
  
  def OnChar(self,event):
    if event.m_controlDown:
      
      code = event.GetKeyCode()
      
      if code == wx.WXK_UP:
        
        if self.is_at >= len(self.history):
          self.command = self.input.GetValue()
        
        if self.is_at > 0 and len(self.history) > 0:
          self.is_at -= 1
          self.input.SetValue(self.history[self.is_at])
          self.input.SetInsertionPointEnd()
        
        return
      
      elif code == wx.WXK_DOWN:
        
        if self.is_at < len(self.history) -1:
          self.is_at += 1
          self.input.SetValue(self.history[self.is_at])
          self.input.SetInsertionPointEnd()

        elif self.is_at < len(self.history):
          self.is_at += 1
          self.input.SetValue(self.command)
          self.input.SetInsertionPointEnd()
        
        return
      
      elif code == wx.WXK_RETURN:
        
        self.execute(event)
        return
    
    self.is_at = len(self.history)
    event.Skip()
  
  def execute(self,event):

    command = self.input.GetValue()
    
    self.output.SetInsertionPointEnd()
    
    self.output.SetDefaultStyle( self.style_in )
    self.output.WriteText( command )
    self.output.WriteText( "\n" )
    
    codeOut = StringIO.StringIO()
    codeErr = StringIO.StringIO()
    sys.stdout = codeOut
    sys.stderr = codeErr
    
    try:
      
      exec(command)

      self.input.SetValue("")
      
      if len(self.history) < 1 or not self.history[-1] == command:
        self.history.append(command)
        if len(self.history) > 10:
          self.history.pop(0)
        
      self.is_at = len(self.history)
        
    except Exception, detail:
      sys.stderr.write("Could not execute command\n%s\n" % detail )
    
    sys.stderr = sys.__stderr__
    s = codeErr.getvalue()
    codeErr.close()
    
    if not s is None and s != "":
      self.output.SetDefaultStyle( self.style_err )
      self.output.WriteText( s )
    
    sys.stdout = sys.__stdout__
    s = codeOut.getvalue()
    codeOut.close()
    
    if not s is None and s != "":
      self.output.SetDefaultStyle( self.style_out )
      self.output.WriteText( s )
    
    self.output.SetDefaultStyle( self.style_default )
    self.output.WriteText("Done.\n\n")
    
    
class ShellApp(wx.App,threading.Thread):
  
  def __init__(self,id):
    wx.App.__init__(self,id)
    threading.Thread.__init__(self)
  
  def OnInit(self):
    frame = Shell()
    frame.Show(True)
    self.SetTopWindow(frame)
    return True
    
  def run(self):
    self.MainLoop()
    
app = ShellApp(0)
app.start()

import time as T
class Ctrl( AutoUpdate( SFTime ) ):
  def update(self, event):
    try:
      T.sleep(.001)
    except:
      pass
    return 0

ctrl = Ctrl()
time.route(ctrl)
