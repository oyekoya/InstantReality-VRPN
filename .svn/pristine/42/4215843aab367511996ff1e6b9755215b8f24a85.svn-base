/**
   Copyright 2006-2007, Karljohan Lundin Palmerius
   

This file is part of Candy.

Candy is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Candy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Candy; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <Candy/CubicPositionInterpolator.hh>


using namespace Candy;
using namespace H3D;


H3DNodeDatabase CubicPositionInterpolator::database
( "CubicPositionInterpolator", 
  &(newInstance<CubicPositionInterpolator>), 
  typeid( CubicPositionInterpolator ),
  &X3DInterpolatorNode::database );


namespace CubicPositionInterpolatorInternals {
  FIELDDB_ELEMENT( CubicPositionInterpolator, keyValue, INPUT_OUTPUT );
  FIELDDB_ELEMENT( CubicPositionInterpolator, value_changed, OUTPUT_ONLY );
  FIELDDB_ELEMENT( CubicPositionInterpolator, closed, INPUT_OUTPUT );
}


CubicPositionInterpolator::CubicPositionInterpolator
( Inst< SFNode  > _metadata, 
  Inst< SFFloat > _set_fraction,
  Inst< MFFloat > _key,
  Inst< MFVec3f > _keyValue,
  Inst< SFValue > _value_changed,
  Inst< SFBool  > _closed )
  : X3DInterpolatorNode( _metadata,
                         _set_fraction,
                         _key ),
    keyValue     ( _keyValue      ),
    value_changed( _value_changed ),
    closed( _closed ) {

  type_name = "CubicPositionInterpolator";
  database.initFields( this );
  
  closed->setValue(false);
  
  set_fraction->route( value_changed, id );
  key->route( value_changed, id );
  keyValue->route( value_changed, id );
  closed->route( value_changed, id );
}


void CubicPositionInterpolator::SFValue::update() {
  CubicPositionInterpolator *interpolator = 
    static_cast<CubicPositionInterpolator*>( getOwner() );
  H3DFloat fraction = 
    static_cast<SFFloat*>(routes_in[0])->getValue( interpolator->id );
  const vector< float > &keys =
    static_cast<MFFloat*>(routes_in[1])->getValue( interpolator->id );
  const vector< Vec3f > &values = 
    static_cast<MFVec3f*>(routes_in[2])->getValue( interpolator->id );
  bool closed = 
    static_cast<SFBool*>(routes_in[3])->getValue( interpolator->id );
  
  int size = values.size();
  if( size <= 0 ){
    std::cerr << "Warning: no values in cubic position interpolator!" << std::endl;
    return; }
  
  if( fraction < Constants::f_epsilon ){
    value = values.front();
    return; }
  if( fraction > 1 - Constants::f_epsilon){
    value = values.back();
    return; }
  
  float index = fraction * (closed ? size : size-1);
  
#define CIQ1(t) (1-2*(t)*(t)+(t)*(t)*(t))
#define CIQ2(t) (4-8*(t)+5*(t)*(t)-(t)*(t)*(t))
  
  int idx = (int)index;
  float f = index - idx;
  
#if 1
  
  Vec3f pos(0,0,0);
  
  if( idx > 0 ){
    pos += CIQ2(f+1) * values[idx-1]; }
  else if( closed ){
    pos += CIQ2(f+1) * values[0]; }
  
  pos += CIQ1( f ) * values[ idx ];
  
  if( idx +1 < size ){
    pos += CIQ1(1-f) * values[idx+1]; }
  else if( closed ){
    pos += CIQ1(1-f) * values[0]; }
  
  if( idx +2 < size || closed ){
    pos += CIQ2(2-f) * values[(idx+2)%size]; }
  
  value = pos;
  
#else
  
  value =
    CIQ2(f+1) * values[ idx > 0 ? idx-1 : closed ? size-1 : 0 ] +
    CIQ1( f ) * values[ idx ] +
    CIQ1(1-f) * values[ idx<size-1 ? idx+1 : closed ? 0 : size-1 ] +
    CIQ2(2-f) * values[ idx<size-2 ? idx+2 : closed ? (idx+2)%size : size-1 ];
  
#endif
  
#undef CIQ1
#undef CIQ2
  
}
