# Copyright 2008, Karljohan Lundin Palmerius
#

"""This file provides scripts for the Candy package.

Do not use this file directly, but use instead the pick_HSV.x3d
file. See the documentation in that file for details on use.



This file is part of Candy.

Candy is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Candy is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Candy; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

"""

from H3D import *
from H3DInterface import *

import math, colorsys


color = SFColor()
position = SFVec3f()
#trigger = SFBool()
#active = SFBool()


move_position = SFVec3f()
move_active = SFBool()
move_transform = SFMatrix4f()


class Pos2Color(TypedField(SFColor,(SFMatrix4f,SFVec3f))):
  
  def update(self,event):
    
    routes_in = self.getRoutesIn()
    if len(routes_in) < 2:
      return RGB(.5,.5,.5)
    
    T = routes_in[0].getValue()
    pos = T * routes_in[1].getValue()
    
    h = min( 0.1, max( -0.1, pos.y ) )
    r = min( 0.1 - math.fabs(h),
             math.sqrt( pos.x * pos.x +
                        pos.z * pos.z ) )
    a = math.atan2( pos.z, pos.x )
    
    s = (r/.1)/( 1 + h/.1 ) if h > -.1 else 0
    
    rgb = colorsys.hsv_to_rgb( a / (2*math.pi) +0.5,
                               s, min( 1, .5 + h/.2 + r/.2 ) )
    
    return RGB(rgb[0], rgb[1], rgb[2] )

class Color2Pos(TypedField(SFVec3f,SFColor)):
  
  def update(self,event):
    
    rgb = self.getRoutesIn()[0].getValue()
    hsv = colorsys.rgb_to_hsv( rgb.r, rgb.g, rgb.b )
    
    a = ( hsv[0] - .5 ) * ( 2 * math.pi )
    h = .1 * ( 2*hsv[2] / (1+hsv[1]) - 1 )
    r = .2 * ( hsv[2] -.5 -h/.2 )
    
    return Vec3f( r * math.cos(a), h,
                  r * math.sin(a) )

color2pos = Color2Pos()
color.route(color2pos)
color2pos.route(position)

pos2color = Pos2Color()
pos2color.route(color)
pos2color.setValue(RGB(.5,.5,.5))


class Trigger(TypedField(SFBool,(SFMatrix4f,SFVec3f))):
  
  def update(self,event):
    
    routes_in = self.getRoutesIn()
    T = routes_in[0].getValue()
    pos = T * routes_in[1].getValue()
    
    return math.sqrt( pos.x*pos.x +
                      pos.z*pos.z ) + pos.y < .1

trigger = Trigger()
move_transform.route(trigger)
move_position.route(trigger)


class Activator(TypedField(SFBool,(SFBool,SFBool))):
  def __init__(self):
    SFBool.__init__(self)
    self.button = False
    self.active = False
    
  def update(self,event):
    routes_in = self.getRoutesIn()
    button = routes_in[0].getValue()
    trigger = routes_in[1].getValue()

    if trigger and button and not self.button:
      move_transform.route(pos2color)
      move_position.route(pos2color)
      self.active = True
    
    elif self.active and not button and self.button:
      move_transform.unroute(pos2color)
      move_position.unroute(pos2color)
      self.active = False
    
    self.button = button
    return self.active

active = Activator()
move_active.route(active)
trigger.route(active)
active.route(eventSink)


class Constraint(SFBool):
  def update(self,event):
    return not self.getRoutesIn()[0].getValue()
constraint = Constraint()
active.route(constraint)


# Generate colour torus

RES_A     =  64
RES_B     =  16
RADIUS_A  =   0.1
RADIUS_B  =   0.005

TorusPoints = MFVec3f()
TorusIndices = MFInt32()
TorusColor = MFColor()

DA_angle = 2 * math.pi / float(RES_B)
points = []
indices = []
rgbs = []
idx = 0

for iterator_a in range(0,RES_A):
  frac_a = iterator_a / float(RES_A)
  angle_a = 2 * math.pi * frac_a
  pos_c = - Vec3f( RADIUS_A * math.cos(angle_a), 0,
                   RADIUS_A * math.sin(angle_a) )
  dir_c = Vec3f( -math.sin(angle_a), 0,
                 +math.cos(angle_a) )
  R = Vec3f(0,RADIUS_B,0)
  DA = Rotation(dir_c,DA_angle)
  for iterator_b in range(0,RES_B):
    points.append( pos_c + R )
    rgb = colorsys.hsv_to_rgb(frac_a,1,1)
    rgbs.append(RGB(rgb[0],rgb[1],rgb[2]))
    if iterator_a > 0:
      indices.append( idx )
      indices.append( idx - RES_B )
    idx = idx + 1
    R = DA * R
  if iterator_a > 0:
    indices.append( idx - RES_B)
    indices.append( idx - 2*RES_B )
    indices.append(-1)
for iterator_b in range(0,RES_B):
  indices.append( iterator_b )
  indices.append( idx - RES_B + iterator_b )
indices.append( 0 )
indices.append( idx - RES_B )


TorusPoints.setValue(points)
TorusIndices.setValue(indices)
TorusColor.setValue(rgbs)
